Solution One:
Set three pointers: pre for the previous node of current node, cur for the current node, and temp for current node's next node
1. temp = cur.next, so that after updating cur.next won't be missed
2. cur.next = pre, reverse the direction of the current pointer
3. pre = cur, move pre to next node
4. cur = temp, move cur to next node
5. After all nodes are traversed, pre will be pointing at the last node, so return it as new head

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head:
            return None
        
        pre = None
        cur = head
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp
            
        return pre
